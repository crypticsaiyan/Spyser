import socket
import threading

# Define two servers for different connections
HOST = '0.0.0.0'
PORT_1 = 65433  # First port for one connection
PORT_2 = 65434  # Second port for another connection

# Function to handle first connection (e.g., keylogger data)
def handle_connection_1(conn1, addr1):
    print(f"Connection 1 established with {addr1}")
    while True:
        data = conn1.recv(1024)
        if not data:
            break
        print(f"Received on Connection 1: {data.decode()}")
    conn1.close()

# Function to handle second connection (e.g., website monitoring data)
def handle_connection_2(conn2, addr2):
    print(f"Connection 2 established with {addr2}")
    while True:
        data = conn2.recv(1024)
        if not data:
            break
        print(f"Received on Connection 2: {data.decode()}")
    conn2.close()

# Set up the two servers
server_socket_1 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket_1.bind((HOST, PORT_1))
server_socket_1.listen(1)

server_socket_2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket_2.bind((HOST, PORT_2))
server_socket_2.listen(1)

print(f"Server listening on {HOST}:{PORT_1} and {HOST}:{PORT_2}")

# Accept connections on both ports and start a thread for each
conn1, addr1 = server_socket_1.accept()
conn2, addr2 = server_socket_2.accept()

# Start threads for each connection
thread_1 = threading.Thread(target=handle_connection_1, args=(conn1, addr1))
thread_2 = threading.Thread(target=handle_connection_2, args=(conn2, addr2))

thread_1.start()
thread_2.start()

# Wait for threads to finish
thread_1.join()
thread_2.join()

server_socket_1.close()
server_socket_2.close()
