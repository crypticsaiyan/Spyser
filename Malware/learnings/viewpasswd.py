import os
import sqlite3
import json
from pathlib import Path
from base64 import b64decode
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
import win32crypt  # Make sure this is installed!
import psutil


def close_edge_instances():
    """Closes all running Microsoft Edge instances."""
    try:
        # Iterate over all running processes
        for proc in psutil.process_iter(attrs=['pid', 'name']):
            # Check if the process name is "msedge" (Microsoft Edge)
            if proc.info['name'].lower() == 'msedge.exe':
                proc.terminate()  # Terminate the process
                print(f"Terminated Edge process with PID: {proc.info['pid']}")

        print("All Edge instances have been terminated.")
    except Exception as e:
        print(f"An error occurred: {e}")


def get_encryption_key():
    """Retrieves the encryption key from Edge's Local State file."""
    try:
        # Path to Local State file
        local_state_path = Path(os.getenv("LOCALAPPDATA")) / "Microsoft" / "Edge" / "User Data" / "Local State"

        # Read the file
        with open(local_state_path, "r", encoding="utf-8") as file:
            local_state_data = json.load(file)

        # Decode the encrypted key
        encrypted_key = b64decode(local_state_data["os_crypt"]["encrypted_key"])

        # Remove DPAPI prefix (first 5 bytes) and decrypt the key
        encrypted_key = encrypted_key[5:]  # Remove "DPAPI"
        decrypted_key = win32crypt.CryptUnprotectData(encrypted_key, None, None, None, 0)[1]
        return decrypted_key
    except Exception as e:
        print(f"Failed to retrieve encryption key: {e}")
        return None


def decrypt_password(encrypted_password, key):
    """Decrypts the given password using the provided encryption key."""
    try:
        # Remove prefix (first 3 bytes)
        encrypted_password = encrypted_password[3:]

        # Extract IV, Ciphertext, and Tag
        iv = encrypted_password[:12]
        ciphertext = encrypted_password[12:-16]
        tag = encrypted_password[-16:]

        # Use AES-GCM decryption
        cipher = Cipher(algorithms.AES(key), modes.GCM(iv, tag))
        decryptor = cipher.decryptor()
        decrypted_password = decryptor.update(ciphertext) + decryptor.finalize()
        return decrypted_password.decode()
    except Exception as e:
        print(f"Failed to decrypt password: {e}")
        return None


def read_edge_passwords():
    """Reads and decrypts stored passwords in the Edge browser."""
    try:
        # Path to Edge's user data directory
        user_data_path = Path(os.getenv("LOCALAPPDATA")) / "Microsoft" / "Edge" / "User Data" / "Default"
        login_data_path = user_data_path / "Login Data"

        # Check if the database file exists
        if not login_data_path.exists():
            print("Edge Login Data file not found. Make sure Edge is installed and has stored passwords.")
            return

        # Retrieve the encryption key
        encryption_key = get_encryption_key()
        if not encryption_key:
            print("Failed to retrieve the encryption key. Cannot decrypt passwords.")
            return

        # Connect to the SQLite database
        conn = sqlite3.connect(login_data_path)
        cursor = conn.cursor()

        # Query to get the stored login information
        cursor.execute("SELECT origin_url, username_value, password_value FROM logins")

        # Fetch all rows
        rows = cursor.fetchall()
        conn.close()

        # Process each row
        for row in rows:
            origin_url = row[0]
            username = row[1]
            encrypted_password = row[2]
            decrypted_password = decrypt_password(encrypted_password, encryption_key)

            print(f"Website: {origin_url}")
            print(f"Username: {username}")
            print(f"Password: {decrypted_password if decrypted_password else 'Failed to decrypt'}")
            print("-" * 50)

    except sqlite3.Error as e:
        print(f"An error occurred while accessing the database: {e}")
        close_edge_instances()
        read_edge_passwords()
    except Exception as ex:
        print(f"An unexpected error occurred: {ex}")


# Usage
read_edge_passwords()
